


* Basic functions

#+name: basic_functions
#+begin_src lisp :tangle fluidized_bed.lisp
(ql:quickload "cl-ppcre")

(defun read-file (infile)
  (with-open-file (instream infile :direction :input :if-does-not-exist nil)
    (when instream 
      (let ((string (make-string (file-length instream))))
        (read-sequence string instream)
        string))))

(defun write-file (string outfile &key (action-if-exists :error))
  (check-type action-if-exists (member nil :error :new-version :rename :rename-and-delete 
					   :overwrite :append :supersede))
  (with-open-file (outstream outfile
			     :direction
			     :output
			     :if-does-not-exist :create
			     :if-exists action-if-exists)
    (write-sequence string outstream)))

(defun range (min max &optional (step 1))
  (when (<= min max)
    (cons min (range (+ min step) max step))))
#+end_src

#+RESULTS: basic_functions
: RANGE


* Export files


Each file has different porosity


#+name: write_new_sif
#+begin_src lisp  :tangle fluidized_bed.lisp
(defun process_string (string &key (fname "fsi1.sif") (porosity "1.0e4 1.0e4"))
  (setf string1
	(cl-ppcre:regex-replace-all
	 "post_file_variable"
	 string
	 fname))
  (setf string2
	(cl-ppcre:regex-replace-all
	 "porosity_variable"
	 string1
	 porosity))
  string2
  )

(defun write_new_sif (infile outfile
		      &key (fname  "f10.sif")
			(porosity "0.5e04 0.5e04")
			)
  (setf readstring (process_string
		    (read-file infile)
		    :fname fname
		    :porosity porosity
		    ))
  (write-file readstring  outfile :action-if-exists :overwrite)
  )

(defun write-sif-files-to-folder (fname infile sif-folder values fpor)
  (loop for i in values
	 do (let ((fname
		    (concatenate 'string
				 fname
				 "_t"
				 (format nil "~5,'0D" i)
				 ".vtu"
				 ))
		  (outfile
		    (concatenate 'string
				 sif-folder
				 fname
				 (format nil "~5,'0D" i)
				 ".sif"
				 ))
		  (porosity
		    (concatenate 'string
				 (let ((npor (fpor i)))
				   (format nil "~5,2F ~5,2F" npor npor)
				   )))
		  )
	      (write_new_sif
	       infile
	       outfile
	       :fname fname
	       :porosity porosity )
	      ))
)

#+end_src

#+RESULTS: write_new_sif
: WRITE-SIF-FILES-TO-FOLDER


* Call them

#+name call_them
#+begin_src lisp :tangle fluidized_bed.lisp
;(load "fluidized_bed.lisp")

(setf infile "/hb/CAE/PorousPipe00/p1/Pipe.sif")

(setf SIF-FOLDER "/hb/CAE/PorousPipe00/p1/sif/")

(defmacro fpor0 (i)
  `(+ 10 (* ,i 5))
  )


(defmacro fpor1 (i)
  `(+ ,(fpor 200) (* (- ,i 200) 50))
  )

(defmacro fpor2 (i)
  `(+ ,(fpor1 300) (* (- ,i 300) 200))
  )


;(setf fpor #'fpor1)

(write-sif-files-to-folder "fluidized_bed"
			   infile
			   SIF-FOLDER
			   (range 300 400)
			   'fpor2)


(concatenate 'list
(mapcar #'(lambda (i) (fpor0 i)) (range 100 200))
	     '("----------------")
(mapcar #'(lambda (i) (fpor1 i)) (range 200 300))
)
#+end_src

#+RESULTS:
| 510 | 515 | 520 | 525 | 530 | 535 | 540 | 545 | 550 | 555 | 560 | 565 | 570 | 575 | 580 | 585 | 590 | 595 | 600 | 605 | 610 | 615 | 620 | 625 | 630 | 635 | 640 | 645 | 650 | 655 | 660 | 665 | 670 | 675 | 680 | 685 | 690 | 695 | 700 | 705 | 710 | 715 | 720 | 725 | 730 | 735 | 740 | 745 | 750 | 755 | 760 | 765 | 770 | 775 | 780 | 785 | 790 | 795 | 800 | 805 | 810 | 815 | 820 | 825 | 830 | 835 | 840 | 845 | 850 | 855 | 860 | 865 | 870 | 875 | 880 | 885 | 890 | 895 | 900 | 905 | 910 | 915 | 920 | 925 | 930 | 935 | 940 | 945 | 950 | 955 | 960 | 965 | 970 | 975 | 980 | 985 | 990 | 995 | 1000 | 1005 | 1010 | ---------------- | 1010 | 1060 | 1110 | 1160 | 1210 | 1260 | 1310 | 1360 | 1410 | 1460 | 1510 | 1560 | 1610 | 1660 | 1710 | 1760 | 1810 | 1860 | 1910 | 1960 | 2010 | 2060 | 2110 | 2160 | 2210 | 2260 | 2310 | 2360 | 2410 | 2460 | 2510 | 2560 | 2610 | 2660 | 2710 | 2760 | 2810 | 2860 | 2910 | 2960 | 3010 | 3060 | 3110 | 3160 | 3210 | 3260 | 3310 | 3360 | 3410 | 3460 | 3510 | 3560 | 3610 | 3660 | 3710 | 3760 | 3810 | 3860 | 3910 | 3960 | 4010 | 4060 | 4110 | 4160 | 4210 | 4260 | 4310 | 4360 | 4410 | 4460 | 4510 | 4560 | 4610 | 4660 | 4710 | 4760 | 4810 | 4860 | 4910 | 4960 | 5010 | 5060 | 5110 | 5160 | 5210 | 5260 | 5310 | 5360 | 5410 | 5460 | 5510 | 5560 | 5610 | 5660 | 5710 | 5760 | 5810 | 5860 | 5910 | 5960 | 6010 |


* run the code


** One process each time

#+name: one-sif-file
#+begin_src shell :async :tangle /hb/CAE/PorousPipe00/p1/run-sif-files1.sh
cd "/hb/CAE/PorousPipe00/p1/sif/"
for f in $(ls *.sif);do
    ElmerSolver $f 
    rm $f
done
#+end_src


** More sif files each time

#+name: two-sif-files 
#+begin_src shell :shebang #!/bin/zsh :async :tangle /hb/CAE/PorousPipe00/p1/run-sif-files2.sh
cd "/hb/CAE/PorousPipe00/p1/sif/"
for i j k l
 in $(ls *.sif);
do
    echo $i:$j
    ElmerSolver $i &
    ElmerSolver $j &
    ElmerSolver $k &
    ElmerSolver $l  
    rm $i 
    rm $j
    rm $k
    rm $l
    echo "*****"
done
#+end_src

when the first ends, we have to wait for the last to end, otherwise does not move on the loop

It can not be stopped, with ctrl-c

#+RESULTS:


* rename results

Elmer outputs: *t_0001.vtu result file for timestep 1.
Each timestep corresponds to different porosity, so the t_0001.vtu has to be removed.


#+begin_src sh :async :shebang #!/bin/bash  :tangle /hb/CAE/PorousPipe00/p1/change-names.sh
cd "/hb/CAE/PorousPipe00/p1/sif/resu/"

for f in $(ls *.vtu);do
	 out=$(echo $f | sed -e 's/_t0001.vtu/\.vtu/g')
	 mv $f  ./delme/$out
done
#+end_src



* check out if it saves time on restart position


 I also rename the post file to keep it from overwriting the previous results.

 #+begin_example
Simulation
Max Output Level = 5
Coordinate System = Cartesian
Coordinate Mapping(3) = 1 2 3
Simulation Type = Scanning
Steady State Max Iterations = 10
Timestep intervals = 10
Timestep Sizes = .1
Output Intervals = 1
Timestepping Method = BDF
BDF Order = 1
Solver Input File = case.sif
! Post File = case.vtu
Post File = restartcase.vtu

!! Restart
!! Output File = run.result
Binary Output = True
Restart File = run.result
Restart Position = 2
Restart Time = .2
End
#+end_example


* work with uiop

#+begin_src lisp
(ql:quickload "uiop")
(ql:quickload "cl-ppcre")

(uiop:chdir #P"/hb/CAE/PorousPipe00/p1/sif/resu/delme")


(defun parse_filename_string (i)
  (if (and i (or (pathnamep i) (stringp i)))
      (setf val (cl-ppcre:scan-to-strings
		  "[0-9].[0-9][0-9][0-9]" (namestring i)))
      )
  (if (integerp val)
      val
	)
  val
    )




(defun  my-list ()
(mapcar #'(lambda (i)
	    (progn 
	      (setf p (parse_filename_string i))
	      (if p 
		  (list i (parse-integer p)))
		  ))
	(uiop:directory-files (uiop:getcwd) "*.vtu")
	)
)


(defun not-exported-sif-file ()
(setf mm (mapcar #'(lambda (i) (cadr i)) (my-list)))

(defun maximum (list)
  (reduce #'max list))

(loop for i in (range 0 (maximum mm))
      if (not (member i mm))
	collect i
      )
)

(defun export-not-exported ()
(write-sif-files-to-folder "fluidized_bed"
			   infile
			   SIF-FOLDER
			   (not-exported-sif-file)
))

;(export-not-exported)
(not-exported-sif-file)

;(mapcar #'(lambda (i) (if ( (cadr i )) (cadr i ))) (my-list))

#+end_src

#+RESULTS:
| 23 | 24 | 25 | 39 | 40 | 219 | 220 | 499 | 500 | 737 | 738 | 739 | 741 | 742 | 743 |





* convert animation to video

ffmpeg -framerate 1 -pattern_type glob -i '*.png' -c:v libx264 -r 30 -pix_fmt yuv420p out.mp4

#+begin_src sh :async :shebang #!/bin/bash  :tangle /hb/CAE/PorousPipe00/p1/to_video.sh
ffmpeg -framerate 10 -pattern_type glob -i '*.png' -c:v libx264 -r 30 -pix_fmt yuv420p out.mp4
#+end_src





#+begin_src lisp :tangle fluidized_bed.lisp

#+begin_src lisp :tangle fluidized_bed.lisp

#+begin_src sh :async :shebang #!/bin/bash  :tangle /hb/CAE/PorousPipe00/p1/
 ps -ax | grep ElmerSolver | awk '{print $1}' | xargs -L1 kill -9
#+end_src
