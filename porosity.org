


* Basic functions

#+name: basic_functions
#+begin_src lisp :tangle fluidized_bed.lisp
(ql:quickload "cl-ppcre")

(defun read-file (infile)
  (with-open-file (instream infile :direction :input :if-does-not-exist nil)
    (when instream 
      (let ((string (make-string (file-length instream))))
        (read-sequence string instream)
        string))))

(defun write-file (string outfile &key (action-if-exists :error))
  (check-type action-if-exists (member nil :error :new-version :rename :rename-and-delete 
					   :overwrite :append :supersede))
  (with-open-file (outstream outfile
			     :direction
			     :output
			     :if-does-not-exist :create
			     :if-exists action-if-exists)
    (write-sequence string outstream)))

(defun range (min max &optional (step 1))
  (when (<= min max)
    (cons min (range (+ min step) max step))))
#+end_src

#+RESULTS: basic_functions
: RANGE


* Export files


Each file has different porosity


#+name: write_new_sif
#+begin_src lisp  :tangle fluidized_bed.lisp
(defun process_string (string &key (fname "fsi1.sif") (porosity "1.0e4 1.0e4"))
  (setf string1
	(cl-ppcre:regex-replace-all
	 "post_file_variable"
	 string
	 fname))
  (setf string2
	(cl-ppcre:regex-replace-all
	 "porosity_variable"
	 string1
	 porosity))
  string2
  )

(defun write_new_sif (infile outfile
		      &key (fname  "f10.sif")
			(porosity "0.5e04 0.5e04")
			)
  (setf readstring (process_string
		    (read-file infile)
		    :fname fname
		    :porosity porosity
		    ))
  (write-file readstring  outfile :action-if-exists :overwrite)
  )

(defun write-sif-files-to-folder (fname infile sif-folder values fpor)
  (loop for i in values
	 do (let ((fname
		    (concatenate 'string
				 fname
				 "_t"
				 (format nil "~5,'0D" i)
				 ".vtu"
				 ))
		  (outfile
		    (concatenate 'string
				 sif-folder
				 fname
				 (format nil "~5,'0D" i)
				 ".sif"
				 ))
		  (porosity
		    (concatenate 'string
				 (let ((npor (fpor i)))
				   (format nil "~5,2F ~5,2F" npor npor)
				   )))
		  )
	      (write_new_sif
	       infile
	       outfile
	       :fname fname
	       :porosity porosity )
	      ))
)

#+end_src

#+RESULTS: write_new_sif
: WRITE-SIF-FILES-TO-FOLDER


* Call them

#+name call_them
#+begin_src lisp :tangle fluidized_bed.lisp
;(load "fluidized_bed.lisp")

(setf infile "/hb/CAE/PorousPipe00/p1/Pipe.sif")

(setf SIF-FOLDER "/hb/CAE/PorousPipe00/p1/sif/")

(defmacro fpor1 (i)
  `(+ 10 (* ,i ,i 0.5))
  )

(defmacro fpor2 (i)
  `(+ 10 (* ,i 5))
  )

(write-sif-files-to-folder "fluidized_bed"
			   infile
			   SIF-FOLDER
			   (range 200 300)
			   'fpor1)



(mapcar #'(lambda (i)
	    (list (fpor1 i) (fpor2 i)))
	    (range 0 200))
	
#+end_src

#+RESULTS:
|    10.0 |   10 |
|    10.5 |   15 |
|    12.0 |   20 |
|    14.5 |   25 |
|    18.0 |   30 |
|    22.5 |   35 |
|    28.0 |   40 |
|    34.5 |   45 |
|    42.0 |   50 |
|    50.5 |   55 |
|    60.0 |   60 |
|    70.5 |   65 |
|    82.0 |   70 |
|    94.5 |   75 |
|   108.0 |   80 |
|   122.5 |   85 |
|   138.0 |   90 |
|   154.5 |   95 |
|   172.0 |  100 |
|   190.5 |  105 |
|   210.0 |  110 |
|   230.5 |  115 |
|   252.0 |  120 |
|   274.5 |  125 |
|   298.0 |  130 |
|   322.5 |  135 |
|   348.0 |  140 |
|   374.5 |  145 |
|   402.0 |  150 |
|   430.5 |  155 |
|   460.0 |  160 |
|   490.5 |  165 |
|   522.0 |  170 |
|   554.5 |  175 |
|   588.0 |  180 |
|   622.5 |  185 |
|   658.0 |  190 |
|   694.5 |  195 |
|   732.0 |  200 |
|   770.5 |  205 |
|   810.0 |  210 |
|   850.5 |  215 |
|   892.0 |  220 |
|   934.5 |  225 |
|   978.0 |  230 |
|  1022.5 |  235 |
|  1068.0 |  240 |
|  1114.5 |  245 |
|  1162.0 |  250 |
|  1210.5 |  255 |
|  1260.0 |  260 |
|  1310.5 |  265 |
|  1362.0 |  270 |
|  1414.5 |  275 |
|  1468.0 |  280 |
|  1522.5 |  285 |
|  1578.0 |  290 |
|  1634.5 |  295 |
|  1692.0 |  300 |
|  1750.5 |  305 |
|  1810.0 |  310 |
|  1870.5 |  315 |
|  1932.0 |  320 |
|  1994.5 |  325 |
|  2058.0 |  330 |
|  2122.5 |  335 |
|  2188.0 |  340 |
|  2254.5 |  345 |
|  2322.0 |  350 |
|  2390.5 |  355 |
|  2460.0 |  360 |
|  2530.5 |  365 |
|  2602.0 |  370 |
|  2674.5 |  375 |
|  2748.0 |  380 |
|  2822.5 |  385 |
|  2898.0 |  390 |
|  2974.5 |  395 |
|  3052.0 |  400 |
|  3130.5 |  405 |
|  3210.0 |  410 |
|  3290.5 |  415 |
|  3372.0 |  420 |
|  3454.5 |  425 |
|  3538.0 |  430 |
|  3622.5 |  435 |
|  3708.0 |  440 |
|  3794.5 |  445 |
|  3882.0 |  450 |
|  3970.5 |  455 |
|  4060.0 |  460 |
|  4150.5 |  465 |
|  4242.0 |  470 |
|  4334.5 |  475 |
|  4428.0 |  480 |
|  4522.5 |  485 |
|  4618.0 |  490 |
|  4714.5 |  495 |
|  4812.0 |  500 |
|  4910.5 |  505 |
|  5010.0 |  510 |
|  5110.5 |  515 |
|  5212.0 |  520 |
|  5314.5 |  525 |
|  5418.0 |  530 |
|  5522.5 |  535 |
|  5628.0 |  540 |
|  5734.5 |  545 |
|  5842.0 |  550 |
|  5950.5 |  555 |
|  6060.0 |  560 |
|  6170.5 |  565 |
|  6282.0 |  570 |
|  6394.5 |  575 |
|  6508.0 |  580 |
|  6622.5 |  585 |
|  6738.0 |  590 |
|  6854.5 |  595 |
|  6972.0 |  600 |
|  7090.5 |  605 |
|  7210.0 |  610 |
|  7330.5 |  615 |
|  7452.0 |  620 |
|  7574.5 |  625 |
|  7698.0 |  630 |
|  7822.5 |  635 |
|  7948.0 |  640 |
|  8074.5 |  645 |
|  8202.0 |  650 |
|  8330.5 |  655 |
|  8460.0 |  660 |
|  8590.5 |  665 |
|  8722.0 |  670 |
|  8854.5 |  675 |
|  8988.0 |  680 |
|  9122.5 |  685 |
|  9258.0 |  690 |
|  9394.5 |  695 |
|  9532.0 |  700 |
|  9670.5 |  705 |
|  9810.0 |  710 |
|  9950.5 |  715 |
| 10092.0 |  720 |
| 10234.5 |  725 |
| 10378.0 |  730 |
| 10522.5 |  735 |
| 10668.0 |  740 |
| 10814.5 |  745 |
| 10962.0 |  750 |
| 11110.5 |  755 |
| 11260.0 |  760 |
| 11410.5 |  765 |
| 11562.0 |  770 |
| 11714.5 |  775 |
| 11868.0 |  780 |
| 12022.5 |  785 |
| 12178.0 |  790 |
| 12334.5 |  795 |
| 12492.0 |  800 |
| 12650.5 |  805 |
| 12810.0 |  810 |
| 12970.5 |  815 |
| 13132.0 |  820 |
| 13294.5 |  825 |
| 13458.0 |  830 |
| 13622.5 |  835 |
| 13788.0 |  840 |
| 13954.5 |  845 |
| 14122.0 |  850 |
| 14290.5 |  855 |
| 14460.0 |  860 |
| 14630.5 |  865 |
| 14802.0 |  870 |
| 14974.5 |  875 |
| 15148.0 |  880 |
| 15322.5 |  885 |
| 15498.0 |  890 |
| 15674.5 |  895 |
| 15852.0 |  900 |
| 16030.5 |  905 |
| 16210.0 |  910 |
| 16390.5 |  915 |
| 16572.0 |  920 |
| 16754.5 |  925 |
| 16938.0 |  930 |
| 17122.5 |  935 |
| 17308.0 |  940 |
| 17494.5 |  945 |
| 17682.0 |  950 |
| 17870.5 |  955 |
| 18060.0 |  960 |
| 18250.5 |  965 |
| 18442.0 |  970 |
| 18634.5 |  975 |
| 18828.0 |  980 |
| 19022.5 |  985 |
| 19218.0 |  990 |
| 19414.5 |  995 |
| 19612.0 | 1000 |
| 19810.5 | 1005 |
| 20010.0 | 1010 |


* run the code


** One process each time

#+name: one-sif-file
#+begin_src shell :async :tangle /hb/CAE/PorousPipe00/p1/run-sif-files1.sh
cd "/hb/CAE/PorousPipe00/p1/sif/"
for f in $(ls *.sif);do
    ElmerSolver $f 
    rm $f
done
#+end_src


** More sif files each time

#+name: two-sif-files 
#+begin_src shell :shebang #!/bin/zsh :async :tangle /hb/CAE/PorousPipe00/p1/run-sif-files2.sh
cd "/hb/CAE/PorousPipe00/p1/sif/"
for i j k l
 in $(ls *.sif);
do
    echo $i:$j
    ElmerSolver $i &
    ElmerSolver $j &
    ElmerSolver $k &
    ElmerSolver $l  
    rm $i 
    rm $j
    rm $k
    rm $l
    echo "*****"
done
#+end_src

when the first ends, we have to wait for the last to end, otherwise does not move on the loop

It can not be stopped, with ctrl-c

#+RESULTS:


* rename results

Elmer outputs: *t_0001.vtu result file for timestep 1.
Each timestep corresponds to different porosity, so the t_0001.vtu has to be removed.


#+begin_src sh :async :shebang #!/bin/bash  :tangle /hb/CAE/PorousPipe00/p1/change-names.sh
cd "/hb/CAE/PorousPipe00/p1/sif/resu/"

for f in $(ls *.vtu);do
	 out=$(echo $f | sed -e 's/_t0001.vtu/\.vtu/g')
	 mv $f  ./delme/$out
done
#+end_src



* check out if it saves time on restart position


 I also rename the post file to keep it from overwriting the previous results.

 #+begin_example
Simulation
Max Output Level = 5
Coordinate System = Cartesian
Coordinate Mapping(3) = 1 2 3
Simulation Type = Scanning
Steady State Max Iterations = 10
Timestep intervals = 10
Timestep Sizes = .1
Output Intervals = 1
Timestepping Method = BDF
BDF Order = 1
Solver Input File = case.sif
! Post File = case.vtu
Post File = restartcase.vtu

!! Restart
!! Output File = run.result
Binary Output = True
Restart File = run.result
Restart Position = 2
Restart Time = .2
End
#+end_example


* work with uiop

#+begin_src lisp
(ql:quickload "uiop")
(ql:quickload "cl-ppcre")

(uiop:chdir #P"/hb/CAE/PorousPipe00/p1/sif/resu/delme")


(defun parse_filename_string (i)
  (if (and i (or (pathnamep i) (stringp i)))
      (setf val (cl-ppcre:scan-to-strings
		  "[0-9].[0-9][0-9][0-9]" (namestring i)))
      )
  (if (integerp val)
      val
	)
  val
    )




(defun  my-list ()
(mapcar #'(lambda (i)
	    (progn 
	      (setf p (parse_filename_string i))
	      (if p 
		  (list i (parse-integer p)))
		  ))
	(uiop:directory-files (uiop:getcwd) "*.vtu")
	)
)


(defun not-exported-sif-file ()
(setf mm (mapcar #'(lambda (i) (cadr i)) (my-list)))

(defun maximum (list)
  (reduce #'max list))

(loop for i in (range 0 (maximum mm))
      if (not (member i mm))
	collect i
      )
)

(defun export-not-exported ()
(write-sif-files-to-folder "fluidized_bed"
			   infile
			   SIF-FOLDER
			   (not-exported-sif-file)
))

;(export-not-exported)
(not-exported-sif-file)

;(mapcar #'(lambda (i) (if ( (cadr i )) (cadr i ))) (my-list))

#+end_src

#+RESULTS:
| 23 | 24 | 25 | 39 | 40 | 219 | 220 | 499 | 500 | 737 | 738 | 739 | 741 | 742 | 743 |





* convert animation to video

ffmpeg -framerate 1 -pattern_type glob -i '*.png' -c:v libx264 -r 30 -pix_fmt yuv420p out.mp4

#+begin_src sh :async :shebang #!/bin/bash  :tangle /hb/CAE/PorousPipe00/p1/to_video.sh
ffmpeg -framerate 10 -pattern_type glob -i '*.png' -c:v libx264 -r 30 -pix_fmt yuv420p out.mp4
#+end_src





#+begin_src lisp :tangle fluidized_bed.lisp

#+begin_src lisp :tangle fluidized_bed.lisp

#+begin_src sh :asyn  :tangle /hb/CAE/PorousPipe00/p1/
 ps -ax | grep ElmerSolver | awk '{print $1}' | xargs -L1 kill -9
#+end_src
